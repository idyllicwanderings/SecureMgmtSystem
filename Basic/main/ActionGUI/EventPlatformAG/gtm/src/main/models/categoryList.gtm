Window CategoryListWindow {
    Label Title_L {
        String text := ['Categories:']
    }
    Table Table_T {
        Set(Category) rows := [Category.allInstances()]
        Category selected  := [null]
        columns {
            ['Name'] : Label name {
                event onView (text) {
                    try {
                        text := [$Table_T.row$.name]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Events'] : Label events {
                event onView (text) {
                    try {
                        text := [$Table_T.row$.events->size().toString()]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }
    Button View_B {
        String text:= ['View Category']
        String probe1
        Set(Event) probe2
        event onClick {
            try {
                probe1 := [$Table_T.selected$.name]
                probe2 := [$Table_T.selected$.events]
                if [(not $Table_T.selected$.oclIsUndefined())] {
                    open CategoryViewWindow(caller:[$CategoryListWindow.caller$], role:[$CategoryListWindow.role$], entity:[$Table_T.selected$])
                } else {
                    notification(['Error'],['Nothing selected'],[500])
                }
            } catch (SecurityException) {
                notification(['Error'],['Not allowed'],[500])
            }
        }
    }
    Button Manage_B {
        String text:= ['Manage Category']
        String probe1
        Set(Person) probe2
        Bag(Role) probe3
        event onClick {
            try {
                probe1 := [$Table_T.selected$.name]
                probe2 := [$Table_T.selected$.moderators]
                probe3 := [Person.allInstances().role]
                if [(not $Table_T.selected$.oclIsUndefined())] {
                    open CategoryEditWindow(caller:[$CategoryListWindow.caller$], role:[$CategoryListWindow.role$], entity:[$Table_T.selected$])
                } else {
                    notification(['Error'],['Nothing selected'],[500])
                }
            } catch (SecurityException) {
                notification(['Error'],['Not allowed'],[500])
            }
        }
    }
    Button Subscribe_B {
        String text:= ['Subscribe']
        event onClick {
            if [ (not $Table_T.selected$.oclIsUndefined())  ] {
                try {
                    if [ not $CategoryListWindow.caller$.subscriptions->includes($Table_T.selected$)] {

                        [$Table_T.selected$.subscribers]+=[$CategoryListWindow.caller$]
                        notification(['Success'],['Subscription successful'],[500])

                        Table_T.rows := [null]
                        reevaluate Table_T.rows
                    } else {
                        notification(['Error'],['Cannot subscribe: Already subscribed'],[500])
                    }
                } catch(SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Nothing selected'],[500])
            }
        }
    }

    Label Name_L {
        String text:= ['Name']
    }
    TextField Name_TF {
        String text:= [null]
    }
    Button Create_B {
        String text:= ['Create']
        event onClick {
            if [(not $Name_TF.text$.oclIsUndefined()) and
                ($Name_TF.text$.size() > 0)] {
                try {
                    newEntity := new Category
                    [$newEntity$.name]:=[$Name_TF.text$]

                    notification(['Success'],['Category created'],[500])
                    Table_T.rows := [null]
                    reevaluate Table_T.rows
                    Name_TF.text:=[null]
                } catch(SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['The form contains errors.'],[500])
            }
        }
    }
    Button Back_B {
        String text := ['Back']
        event onClick {
            back
        }
    }
}

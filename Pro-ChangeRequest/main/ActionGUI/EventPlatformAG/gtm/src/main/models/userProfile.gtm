Window UserProfileWindow {
    Person entity

    Label WindowTitle_L {
        String text := ['User Profile']
    }

    Button Edit_B {
        String text := ['My information']
        String probe1
        Role probe2
        event onClick {
            try {
                probe1 := [$UserProfileWindow.caller$.name]
                probe1 := [$UserProfileWindow.caller$.surname]
                probe1 := [$UserProfileWindow.caller$.username]
                probe2 := [$UserProfileWindow.caller$.role]
                open UserWindow(caller:[$UserProfileWindow.caller$], role:[$UserProfileWindow.role$], entity:[$UserProfileWindow.caller$])
                
            } catch (SecurityException) {
                notification(['Error'],['Not allowed'],[500])
            }
        }
    }
    Label Events_L {
        String text := ['My managed events:']
    }
    Table Table_T {
        Set(Event) rows := [$UserProfileWindow.entity$.events->union($UserProfileWindow.entity$.manages)]
        Event selected  := [null]
        columns {
            ['Title'] : Label title {
                event onView (text) {
                    try {
                        text := [$Table_T.row$.title]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Owner'] : Label own {
                event onView (text) {
                    try {
                        text := [$Table_T.row$.owner.name.concat(' ').concat($Table_T.row$.owner.surname)]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }
    Button Edit_Evt_B {
        String text:= ['Edit Event']
        String probe1
        Boolean probe2
        Set(Category) probe3
        event onClick {
            if [ (not $Table_T.selected$.oclIsUndefined())  ] {
                try {
                    probe1 := [$Table_T.selected$.title]
                    probe1 := [$Table_T.selected$.description]
                    probe2 := [$Table_T.selected$.private]
                    probe3 := [$Table_T.selected$.categories]
                    open EventEditWindow(caller:[$UserProfileWindow.caller$], role:[$UserProfileWindow.role$], entity:[$Table_T.selected$])
                } catch (SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Nothing selected'],[500])
            }
        }
    }
    Label Attending_L {
        String text := ['My attending events:']
    }
    Table Table_Att_T {
        Set(Event) rows := [$UserProfileWindow.entity$.attends]
        Event selected  := [null]
        columns {
            ['Title'] : Label title {
                event onView (text) {
                    try {
                        text := [$Table_Att_T.row$.title]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Owner'] : Label own {
                event onView (text) {
                    try {
                        text := [$Table_Att_T.row$.owner.name.concat(' ').concat($Table_Att_T.row$.owner.surname)]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }
    Button View_Evt_B {
        String text:= ['View Event']
        String probe1
        Set(Category) probe2
        event onClick {
            if [ (not $Table_Att_T.selected$.oclIsUndefined())  ] {
                try {
                    probe1 := [$Table_Att_T.selected$.title]
                    probe1 := [$Table_Att_T.selected$.description]
                    probe2 := [$Table_Att_T.selected$.categories]
                    open EventViewWindow(caller:[$UserProfileWindow.caller$], role:[$UserProfileWindow.role$], entity:[$Table_Att_T.selected$])
                } catch (SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Nothing selected'],[500])
            }
        }
    }
    Button Leave_B {
        String text:= ['Leave Event']
        event onClick {
            if [ (not $Table_Att_T.selected$.oclIsUndefined())  ] {
                try {
                    //if [ not $UserProfileWindow.entity$.events->includes($Table_Att_T.selected$)] {
                        [$UserProfileWindow.entity$.attends] -= [$Table_Att_T.selected$]

                        notification(['Success'],['You have left the event'],[500])
                        Table_Att_T.rows := [null]
                        reevaluate Table_Att_T.rows

                    //} else {
                    //    notification(['Error'],['Cannot leave events that you own or manage'],[500])
                    //}
                } catch (SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Nothing selected'],[500])
            }
        }
    }

    Label Title_Sub_L {
        String text := ['My subscriptions:']
    }
    Table Table_Sub_T {
        Set(Category) rows := [$UserProfileWindow.entity$.subscriptions]
        Set(Category) selected  := [null]
        columns {
            ['Name'] : Label name {
                event onView (text) {
                    try {
                        text := [$Table_Sub_T.row$.name]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Events'] : Label events {
                event onView (text) {
                    try {
                        text := [$Table_Sub_T.row$.events->size().toString()]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Subscribers'] : Label subs {
                event onView (text) {
                    try {
                        text := [$Table_Sub_T.row$.subscribers->size().toString()]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }

    Button Unsubscribe_B {
        String text:= ['Unsubscribe']
        event onClick {
            if [ (not $Table_Sub_T.selected$->oclIsUndefined()) and
                 (not ($Table_Sub_T.selected$->size() < 1)) ] {
                try {
                    foreach cat in [$Table_Sub_T.selected$] {
                        if [ $UserProfileWindow.entity$.subscriptions->includes($cat$) ] {
                            [$cat$.subscribers]-=[$UserProfileWindow.entity$]
                        }
                    }
                    notification(['Success'],['Unsubscription(s) successful'],[500])

                    Table_T.rows := [null]
                    reevaluate Table_T.rows
                    Table_Sub_T.rows := [null]
                    reevaluate Table_Sub_T.rows
                    Table_Event_T.rows := [null]
                    reevaluate Table_Event_T.rows
                } catch(SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Nothing selected'],[500])
            }
        }
    }

    Label Events_Cat_L {
        String text := ["Events in my categories:"]
    }
    Table Table_Event_T {
        Set(Event) rows := [$UserProfileWindow.entity$.subscriptions.events->asSet()]
        Event selected  := [null]
        columns {
            ['Title'] : Label title {
                event onView (text) {
                    try {
                        text := [$Table_Event_T.row$.title]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Owner'] : Label own {
                event onView (text) {
                    try {
                        text := [$Table_Event_T.row$.owner.name.concat(' ').concat($Table_Event_T.row$.owner.surname)]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }


    Label Invitations_L {
        String text := ['Event invitations:']
    }
    Table Table_Inv_T {
        Set(Invite) rows := [$UserProfileWindow.entity$.invitations]
        Invite selected  := [null]
        columns {
            ['Title'] : Label title {
                event onView (text) {
                    try {
                        text := [$Table_Inv_T.row$.event.title]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Invited by'] : Label own {
                event onView (text) {
                    try {
                        text := [$Table_Inv_T.row$.invitedBy.name.concat(' ').concat($Table_Inv_T.row$.invitedBy.surname)]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }
    Button Accept_B {
        String text:= ['Accept']
        event onClick {
            if [ (not $Table_Inv_T.selected$.oclIsUndefined())  ] {
                try {

                    [$UserProfileWindow.entity$.attends] += [$Table_Inv_T.selected$.event]
                    delete [$Table_Inv_T.selected$]

                    notification(['Success'],['Invite accepted'],[500])
                    Table_Att_T.rows := [null]
                    reevaluate Table_Att_T.rows
                    Table_Inv_T.rows := [null]
                    reevaluate Table_Inv_T.rows

                } catch (SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Nothing selected'],[500])
            }
        }
    }
    Button Decline_B {
        String text:= ['Decline']
        event onClick {
            if [ (not $Table_Inv_T.selected$.oclIsUndefined())  ] {
                try {

                    delete [$Table_Inv_T.selected$]

                    notification(['Success'],['Invite rejected'],[500])

                    Table_Inv_T.rows := [null]
                    reevaluate Table_Inv_T.rows

                } catch (SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Nothing selected'],[500])
            }
        }
    }


    Button Back_B {
        String text := ['Back']
        event onClick {
            back
        }
    }
}

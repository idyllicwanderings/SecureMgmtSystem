Window UserWindow {
    Person entity

    Label Name_L {
        String text:= ['Name:']
    }
    TextField Name_TF {
        String text := [$UserWindow.entity$.name]
    }
    Label Surname_L {
        String text:= ['Surname:']
    }
    TextField Surname_TF {
        String text := [$UserWindow.entity$.surname]
    }
    Label Username_L {
        String text:= ['Username:']
    }
    Label Entityusername_L {
        String text := [$UserWindow.entity$.username]
    }
    Label Password_L {
        String text:= ['Password:']
    }
    PasswordField Password_PF {
        String text := [null]
    }
    Label Role_L {
        String text:= ['Role:']
    }
    ComboBox Role_CB {
        Set(Role) rows := [Role.allInstances()->select(r|r<>Role::SYSTEM and r<>Role::NONE)]
        Role selected  := [$UserWindow.entity$.role]
        Label roles {
            event onView (text) {
                try {
                    text := [$Role_CB.row$.name()]
                } catch (SecurityException) {
                    text := ['RESTRICTED']
                }
            }
        }
    }

    Button Update_B {
        String text := ['Update info']
        event onClick {
            try {
                if [$UserWindow.entity$.name <> $Name_TF.text$] {
                    [$UserWindow.entity$.name]:=[$Name_TF.text$]
                }
                if [$UserWindow.entity$.surname <> $Surname_TF.text$] {
                    [$UserWindow.entity$.surname]:=[$Surname_TF.text$]
                }
                if [(not $Password_PF.text$.oclIsUndefined()) and
                    (not ($Password_PF.text$.size()=0))] {
                    [$UserWindow.entity$.password]:=[$Password_PF.text$]
                }
                if [$UserWindow.entity$.role <> $Role_CB.selected$] {
                    [$UserWindow.entity$.role]:=[$Role_CB.selected$]
                }
                notification(['Success'],['User updated'],[500])
            } catch (SecurityException) {
                notification(['Error'],['Not allowed'],[500])
            }
        }
    }
    Button Categories_B {
        String text := ['View Subscriptions']
        event onClick {
            try {
                Table_Cats_T.rows := [$UserWindow.entity$.subscriptions]
                //reevaluate Table_Cats_T.rows

            } catch (SecurityException) {
                notification(['Error'],['Not allowed'],[500])
            }
        }
    }
    Table Table_Cats_T {
        Set(Category) rows := [Set {}]
        Set(Category) selected  := [null]
        columns {
            ['Name'] : Label name {
                event onView (text) {
                    try {
                        text := [$Table_Cats_T.row$.name]
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }

    Button Back_B {
        String text := ['Back']
        event onClick {
            back
        }
    }


}
